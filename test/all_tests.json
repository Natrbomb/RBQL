[
    {
        "test_name": "test1",
        "input_table": [
            ["5", "haha", "hoho"],
            ["-20", "haha", "hioho"],
            ["50", "haha", "dfdf"],
            ["20", "haha", ""]
        ],
        "expected_output_table": [
            [3, "50", 4],
            [4, "20", 0]
        ],
        "query_python": "select NR, a1, len(a3) where int(a1) > 5",
        "query_js": "select NR, a1, a3.length where a1 > 5"
    },
    {
        "test_name": "test2",
        "input_table": [
            ["5", "haha", "hoho"],
            ["-20", "haha", "hioho"],
            ["50", "haha", "dfdf"],
            ["20", "haha", ""],
            ["8"],
            ["3", "4", "1000", "asdfasf", "asdfsaf", "asdfa"],
            ["11", "hoho", ""],
            ["10", "hihi", ""],
            ["13", "haha", ""]
        ],
        "expected_output_table": [
            ["haha"],
            ["hoho"]
        ],
        "expected_warnings": [
            "inconsistent input records"
        ],
        "query_python": "\tselect    distinct\ta2 where int(a1) > 10 ",
        "query_js": "\tselect    distinct\ta2 where a1 > 10  "
    },
    {
        "test_name": "test4",
        "input_table": [
            ["0", "haha", "hoho"],
            ["9"],
            ["81", "haha", "dfdf"],
            ["4", "haha", "dfdf", "asdfa", "111"]
        ],
        "expected_output_table": [
            [0, "\\'\\\"a1   bc"],
            [3, "\\'\\\"a1   bc"],
            [9, "\\'\\\"a1   bc"],
            [2, "\\'\\\"a1   bc"]
        ],
        "expected_warnings": [
            "inconsistent input records"
        ],
        "query_python": "select int(math.sqrt(int(a1))), r\"\\'\\\"a1   bc\"",
        "query_js": "select Math.floor(Math.sqrt(a1)), String.raw`\\'\\\"a1   bc`"
    },
    {
        "test_name": "test5",
        "input_table": [
            ["0", "haha", "hoho"],
            ["9"],
            ["81", "haha", "dfdf"],
            ["4", "haha", "dfdf", "asdfa", "111"]
        ],
        "expected_output_table": [
            ["haha"],
            [null],
            ["haha"],
            ["haha"]
        ],
        "expected_warnings": [
            "inconsistent input records"
        ],
        "query_python": "select a2",
        "query_js": "select a2"
    },
    {
        "test_name": "test6",
        "input_table": [
            ["5", "car", "lada"],
            ["-20", "car", "Ferrari"],
            ["50", "plane", "tu-134"],
            ["20", "boat", "destroyer"],
            ["10", "boat", "yacht "],
            ["200", "plane", "boeing 737"],
            ["80", "train", "Thomas"]
        ],
        "join_table": [
            ["bicycle", "legs"],
            ["car", "gas "],
            ["plane", "wings  "],
            ["boat", "wind"],
            ["rocket", "some stuff"]
        ],
        "expected_output_table": [
            [5, "10", "boat", "yacht ", "boat", "wind"],
            [4, "20", "boat", "destroyer", "boat", "wind"],
            [2, "-20", "car", "Ferrari", "car", "gas "],
            [1, "5", "car", "lada", "car", "gas "],
            [3, "50", "plane", "tu-134", "plane", "wings  "],
            [6, "200", "plane", "boeing 737", "plane", "wings  "]
        ],
        "query_python": "select NR, * inner join B on a2 == b1 where b2 != \"haha\" and int(a1) > -100 and len(b2) > 1 order by a2, int(a1)",
        "query_js": "select NR, * inner join B on a2 == b1 where   b2 !=  \"haha\" &&  a1 > -100 &&  b2.length >  1 order by a2, parseInt(a1)"
    },
    {
        "test_name": "test7",
        "input_table": [
            ["100", "magic carpet", "nimbus 3000"],
            ["5", "car", "lada"],
            ["-20", "car", "ferrari"],
            ["50", "plane", "tu-134"],
            ["20", "boat", "destroyer"],
            ["10", "boat", "yacht"],
            ["200", "plane", "boeing 737"]
        ],
        "join_table": [
            ["bicycle", "legs"],
            ["car", "gas"],
            ["plane", "wings"],
            ["rocket", "some stuff"]
        ],
        "expected_output_table": [
            [null, null, "100"],
            ["car", "gas", "5"],
            ["car", "gas", "-20"],
            [null, null, "20"],
            [null, null, "10"]
        ],
        "query_python": "select b1,b2,   a1 left join  B  on a2 == b1 where b2 != \"wings\"",
        "query_js": "select b1,b2,   a1 left join  B  on a2 == b1 where b2 != \"wings\""
    },
    {
        "test_name": "test8",
        "input_table": [
            ["5", "car", "lada"],
            ["-20", "car", "ferrari"],
            ["50", "plane", "tu-134"],
            ["20", "boat", "destroyer"],
            ["10", "boat", "yacht"],
            ["200", "plane", "boeing 737"],
            ["100", "magic carpet", "nimbus 3000"]
        ],
        "join_table": [
            ["bicycle", "legs"],
            ["car", "gas"],
            ["plane", "wings"],
            ["rocket", "some stuff"]
        ],
        "expected_error": "In \"STRICT LEFT JOIN\" each key in A must have exactly one match in B",
        "query_python": "select b1,b2,   a1 strict left join B on a2 == b1 where b2 != \"wings\"",
        "query_js": "select b1,b2,   a1 strict left join B on a2 == b1 where b2 != \"wings\""
    },
    {
        "test_name": "test9",
        "input_table": [
            ["5", "car", "lada"],
            ["-20", "car", "ferrari"],
            ["50", "plane", "tu-134"],
            ["200", "plane", "boeing 737"]
        ],
        "join_table": [
            ["bicycle", "legs"],
            ["car", "gas"],
            ["plane", "wings"],
            ["rocket", "some stuff"]
        ],
        "expected_output_table": [
            [3, "car"],
            [3, "car"],
            [5, "plane"],
            [5, "plane"]
        ],
        "query_python": "select len(b1), a2 strict left join B on a2 == b1",
        "query_js": "select b1.length,  a2 strict left join B on a2 == b1"
    },
    {
        "test_name": "test_OR",
        "input_table": [
            ["5", "haha", "hoho"],
            ["-20", "haha", "hioho"],
            ["50", "haha", "dfdf"],
            ["20", "haha", ""]
        ],
        "join_table": [
            ["bicycle", "legs"],
            ["car", "gas"],
            ["plane", "wings"],
            ["rocket", "some stuff"]
        ],
        "expected_output_table": [
            ["5", "haha", "hoho"],
            ["50", "haha", "dfdf"]
        ],
        "query_python": "select * where a3 ==\"hoho\" or int(a1)==50 or a1 == \"aaaa\" or a2== \"bbbbb\" ",
        "query_js": "select * where a3 ==\"hoho\" || parseInt(a1)==50 || a1 == \"aaaa\" || a2== \"bbbbb\" "
    },
    {
        "test_name": "test_unicode_1",
        "input_table": [
            ["5", "Петр Первый", "hoho"],
            ["-20", "Екатерина Великая", "hioho"],
            ["50", "Наполеон", "dfdf"],
            ["20", "Наполеон", ""]
        ],
        "expected_output_table": [
            ["50", "Наполеон", "dfdf"],
            ["20", "Наполеон", ""]
        ],
        "query_python": "select * where a2== \"Наполеон\" ",
        "query_js": "select * where a2== \"Наполеон\" "
    },
    {
        "test_name": "test_join_12",
        "input_table": [
            ["5", "car", "lada"],
            ["-20", "car", "Ferrari"],
            ["50", "plane", "tu-134"],
            ["20", "boat", "destroyer"],
            ["10", "boat", "yacht"],
            ["200", "plane", "boeing 737"],
            ["80", "train", "Thomas"]
        ],
        "join_table": [
            ["bicycle", "legs"],
            ["car", "gas"],
            ["plane", "wings"],
            ["boat", "wind"],
            ["rocket", "some stuff"]
        ],
        "expected_output_table": [
            [5, "10", "boat", "yacht", "boat", "wind"],
            [4, "20", "boat", "destroyer", "boat", "wind"],
            [2, "-20", "car", "Ferrari", "car", "gas"],
            [1, "5", "car", "lada", "car", "gas"],
            [3, "50", "plane", "tu-134", "plane", "wings"],
            [6, "200", "plane", "boeing 737", "plane", "wings"]
        ],
        "query_python": "select NR, * JOIN B on a2 == b1 where b2 != \"haha\" and int(a1) > -100 and len(b2) > 1 order   by a2, int(a1)",
        "query_js": "select NR, * JOIN B on a2 == b1 where b2 != \"haha\" && a1 > -100 && b2.length > 1 order    by a2, parseInt(a1)"
    },
    {
        "test_name": "regexp_1",
        "input_table": [
            ["5", "haha   asdf", "hoho"],
            ["50", "haha  asdf", "dfdf"],
            ["20", "haha    asdf", ""],
            ["-20", "haha   asdf", "hioho"]
        ],
        "expected_output_table": [
            ["5", "haha   asdf", "hoho"],
            ["-20", "haha   asdf", "hioho"]
        ],
        "query_python": "select * where re.search(\"a   as\", a2)  is   not  None",
        "query_js": "select * where /a   as/.test(a2)"
    },
    {
        "test_name": "update_1",
        "input_table": [
            ["5", "haha   asdf", "hoho"],
            ["50", "haha  asdf", "dfdf"],
            ["20", "haha    asdf", ""],
            ["-20", "haha   asdf", "hioho"]
        ],
        "expected_output_table": [
            ["5", "haha   asdf", "hoho"],
            [100, "haha  asdf hoho", "dfdf"],
            [100, "haha    asdf hoho", ""],
            ["-20", "haha   asdf", "hioho"]
        ],
        "query_python": "update a2 = a2 + \" hoho\", a1 = 100 where int(a1) > 10",
        "query_js": "update a2 = a2 + \" hoho\", a1 = 100 where parseInt(a1) > 10"
    },
    {
        "test_name": "update_unicode_1",
        "input_table": [
            ["5", "Петр Первый", "hoho"],
            ["-20", "Екатерина Великая", "hioho"],
            ["50", "Наполеон", "dfdf"],
            ["20", "Наполеон"]
        ],
        "expected_output_table": [
            ["5", "Наполеон", "hoho"],
            ["-20", "Наполеон", "hioho"],
            ["50", "Наполеон", "dfdf"],
            ["20", "Наполеон"]
        ],
        "expected_warnings": [
            "inconsistent input records"
        ],
        "query_python": "update set a2= \"Наполеон\" ",
        "query_js": "update  set  a2= \"Наполеон\" "
    },
    {
        "test_name": "update_with_join_1",
        "input_table": [
            ["100", "magic carpet", "nimbus 3000"],
            ["5", "car", "lada"],
            ["-20", "car", "ferrari"],
            ["50", "plane", "tu-134"],
            ["20", "boat", "destroyer"],
            ["10", "boat", "yacht"],
            ["200", "plane", "boeing 737"]
        ],
        "join_table": [
            ["bicycle", "legs"],
            ["car", "gas"],
            ["plane", "wings"],
            ["rocket", "some stuff"]
        ],
        "expected_output_table": [
            ["100", "magic carpet", "nimbus 3000"],
            ["5", "car (gas)", "lada"],
            ["-20", "car (gas)", "ferrari"],
            ["50", "plane", "tu-134"],
            ["20", "boat", "destroyer"],
            ["10", "boat", "yacht"],
            ["200", "plane", "boeing 737"]
        ],
        "query_python": "update set a2 = \"{} ({})\".format(a2, b2) inner join B on a2 == b1 where b2 != \"wings\"",
        "query_js": "update set a2 = a2 + \" (\" + b2 + \")\" inner join B on a2 == b1 where b2 != \"wings\""
    },
    {
        "test_name": "distinct_count",
        "input_table": [
            ["cde", "1234"],
            ["abc", "1234"],
            ["abc", "1234"],
            ["efg", "100"],
            ["abc", "100"],
            ["cde", "12999"],
            ["aaa", "2000"],
            ["abc", "100"]
        ],
        "expected_output_table": [
            [2, "cde"],
            [4, "abc"],
            [1, "efg"],
            [1, "aaa"]
        ],
        "query_python": "select distinct count a1 where int(a2) > 10",
        "query_js": "select distinct count a1 where parseInt(a2) > 10"
    },
    {
        "test_name": "distinct_count_order_asc_limit",
        "input_table": [
            ["cde", "1234"],
            ["abc", "1234"],
            ["abc", "1234"],
            ["efg", "100"],
            ["abc", "100"],
            ["cde", "12999"],
            ["aaa", "2000"],
            ["abc", "100"]
        ],
        "expected_output_table": [
            [1, "efg"],
            [4, "abc"]
        ],
        "query_python": "select distinct count a1 where int(a2) > 10 order by int(a2) asc limit   2  ",
        "query_js": "select distinct count a1 where parseInt(a2) > 10 order by parseInt(a2) asc limit 2"
    },
    {
        "test_name": "update_left_join",
        "input_table": [
            ["100", "magic carpet", "nimbus 3000"],
            ["5", "car", "lada"],
            ["-20", "car", "ferrari"],
            ["50", "plane", "tu-134"],
            ["20", "boat", "destroyer"],
            ["10", "boat", "yacht"],
            ["200", "plane", "boeing 737"]
        ],
        "join_table": [
            ["bicycle", "legs"],
            ["car", "gas"],
            ["plane", "wings"],
            ["rocket", "some stuff"]
        ],
        "expected_output_table": [
            ["100", "magic carpet", null],
            ["5", "car", "gas"],
            ["-20", "car", "gas"],
            ["50", "plane", "tu-134"],
            ["20", "boat", null],
            ["10", "boat", null],
            ["200", "plane", "boeing 737"]
        ],
        "query_python": "update set a3 = b2 left join B on a2 == b1 where b2 != \"wings\"",
        "query_js": "update set a3 = b2 left join B on a2 == b1 where b2 != \"wings\""
    },
    {
        "test_name": "single_column",
        "input_table": [
            ["cde"],
            ["abc"],
            ["abc"],
            ["efg"],
            ["abc"],
            ["cde"],
            ["aaa"],
            ["abc"]
        ],
        "expected_output_table": [
            ["cde"],
            ["abc"],
            ["efg"],
            ["aaa"]
        ],
        "query_python": "select distinct a1",
        "query_js": "select distinct a1"
    },
    {
        "test_name": "single_column_join_table",
        "input_table": [
            ["100", "magic carpet", "nimbus 3000"],
            ["5", "car", "lada"],
            ["-20", "car", "ferrari"],
            ["50", "plane", "tu-134"],
            ["20", "boat", "destroyer"],
            ["10", "boat", "yacht"],
            ["200", "plane", "boeing 737"]
        ],
        "join_table": [
            ["bicycle"],
            ["car"],
            ["plane"],
            ["rocket"]
        ],
        "expected_output_table": [
            ["5", "car", "lada"],
            ["-20", "car", "ferrari"],
            ["50", "plane", "tu-134"],
            ["200", "plane", "boeing 737"]
        ],
        "query_python": "select a1,a2,a3 left join B on a2 == b1 where b1 is not None",
        "query_js": "select a1,a2,a3 left join B on a2 == b1 where b1 != null"
    },
    {
        "test_name": "aggregate_funcs_without_group_by",
        "input_table": [
            ["car", "1", "100", "1"],
            ["car", "2", "100", "1"],
            ["dog", "3", "100", "2"],
            ["car", "4", "100", "2"],
            ["cat", "5", "100", "3"],
            ["cat", "6", "100", "3"],
            ["car", "7", "100", "100"],
            ["car", "8", "100", "100"]
        ],
        "expected_output_table": [
            ["100", 10, 8, 8, 8, 8, 800, 4.5, 5.25, 2.5]
        ],
        "query_python": "select a3, MIN(int(a2) * 10), MAX(a2), COUNT(*), COUNT(1), COUNT(a1), SUM(a3), AVG(a2), VARIANCE(a2), MEDIAN(a4)",
        "query_js": "select a3, MIN(a2 * 10), MAX(a2), COUNT(*), COUNT(1), COUNT(a1), SUM(a3), AVG(a2), VARIANCE(a2), MEDIAN(a4)"
    },
    {
        "test_name": "aggregate_funcs_with_group_by",
        "input_table": [
            ["car", "1", "100", "1"],
            ["car", "2", "100", "1"],
            ["dog", "3", "100", "2"],
            ["car", "4", "100", "2"],
            ["cat", "5", "100", "3"],
            ["cat", "6", "100", "3"],
            ["car", "7", "100", "100"],
            ["car", "8", "100", "100"]
        ],
        "expected_output_table": [
            ["car", "100", 10, 8, 5, 5, 5, 500, 4.4, 7.44, 2],
            ["cat", "100", 50, 6, 2, 2, 2, 200, 5.5, 0.25, 3],
            ["dog", "100", 30, 3, 1, 1, 1, 100, 3.0, 0.0, 2]
        ],
        "query_python": "select a1, a3, MIN(int(a2) * 10), MAX(a2), COUNT(*), COUNT(1), COUNT(a1), SUM(a3), AVG(a2), VARIANCE(a2), MEDIAN(a4) group by a1",
        "query_js": "select a1, a3, MIN(a2 * 10), MAX(a2), COUNT(*), COUNT(1), COUNT(a1), SUM(a3), AVG(a2), VARIANCE(a2), MEDIAN(a4) group by a1"
    },
    {
        "test_name": "aggregate_funcs_with_group_by_and_where",
        "input_table": [
            ["car", "1", "100", "1"],
            ["car", "2", "100", "1"],
            ["dog", "3", "100", "2"],
            ["car", "4", "100", "2"],
            ["cat", "5", "100", "3"],
            ["cat", "6", "100", "3"],
            ["car", "7", "100", "100"],
            ["car", "8", "100", "100"]
        ],
        "expected_output_table": [
            ["car", "100", 10, 8, 5, 5, 5, 500, 4.4, 7.44, 2],
            ["dog", "100", 30, 3, 1, 1, 1, 100, 3.0, 0.0, 2]
        ],
        "query_python": "select a1, a3, MIN(int(a2) * 10), MAX(a2), COUNT(*), COUNT(1), COUNT(a1), SUM(a3), AVG(a2), VARIANCE(a2), MEDIAN(a4) where a1 != \"cat\" group by a1",
        "query_js": "select a1, a3, MIN(a2 * 10), MAX(a2), COUNT(*), COUNT(1), COUNT(a1), SUM(a3), AVG(a2), VARIANCE(a2), MEDIAN(a4) where a1 != \"cat\" group by a1"
    },
    {
        "test_name": "test_NU_variable",
        "input_table": [
            ["5", "haha   asdf", "hoho"],
            ["50", "haha  asdf", "dfdf"],
            ["20", "haha    asdf", ""],
            ["-20", "haha   asdf", "hioho"],
            ["40", "lol", "hioho"]
        ],
        "expected_output_table": [
            ["5", "haha   asdf", "hoho"],
            [100, "haha  asdf 1", "dfdf"],
            [100, "haha    asdf 2", ""],
            ["-20", "haha   asdf", "hioho"],
            [100, "lol 3", "hioho"]
        ],
        "query_python": "update a2 = \"{} {}\".format(a2, NU) , a1 = 100 where int(a1) > 10",
        "query_js": "update a2 = a2 + \" \" + NU, a1 = 100 where parseInt(a1) > 10"
    },
    {
        "test_name": "single_column_to_multiple_columns",
        "input_table": [
            ["cde"],
            ["abc"],
            ["a,bc"],
            ["efg"]
        ],
        "expected_output_table": [
            ["cde", "cde2"],
            ["abc", "abc2"],
            ["a,bc", "a,bc2"],
            ["efg", "efg2"]
        ],
        "query_python": "select a1, a1 + \"2\"",
        "query_js": "select a1, a1 + \"2\""
    },
    {
        "test_name": "js_interpolation_test",
        "input_table": [
            ["cde", "hello"],
            ["abc", "world"],
            ["abc", "stack"]
        ],
        "expected_output_table": [
            ["mv cde hello1 --opt1 --opt2"],
            ["mv abc world2 --opt1 --opt2"],
            ["mv abc stack3 --opt1 --opt2"]
        ],
        "query_python": "select \"mv {} {} --opt1 --opt2\".format(a1, a2 + str(NR))",
        "query_js": "select `mv ${a1} ${a2 + NR} --opt1 --opt2`"
    }
]
